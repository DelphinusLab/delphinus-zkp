import "hashes/poseidon/poseidon" as hash
import "ecc/edwardsCompress" as edwardsCompress
import "ecc/babyjubjubParams" as context
from "ecc/babyjubjubParams" import BabyJubJubParams
import "utils/casts/u32_from_bits" as u32_from_bits
import "utils/casts/u32_to_bits" as u32_to_bits
import "utils/casts/u32_to_field" as u32_to_field
import "utils/multiplexer/lookup2bit" as lookup2bit

struct LeafInfo {
	field[4] leafValues
	u32 index
	field[15][4] pathDigests
}

def checkTarget(bool[2] selector, field value, field[4] values) -> bool:
	return value == lookup2bit(selector, values)

def u32_from_2bits(bool[2] selector) -> u32:
	return u32_from_bits([...[false; 30], ...selector])

def main(field rootDigest, LeafInfo leafInfo) -> bool:
	bool[32] selector = u32_to_bits(leafInfo.index)

	bool ret = true
	field currentValue = hash(leafInfo.leafValues)
    for u32 i in 0..15 do
		u32 layer = 15 - i - 1
		ret = ret && checkTarget([selector[layer * 2], selector[layer * 2 + 1]], currentValue, leafInfo.pathDigests[layer])
		currentValue = hash(leafInfo.pathDigests[layer])
    endfor
	return (rootDigest == currentValue)

def getRootHash(LeafInfo leafInfo) -> field:
	bool[32] selector = u32_to_bits(leafInfo.index)

	bool ret = true
	field currentValue = hash(leafInfo.leafValues)
    for u32 i in 0..15 do
		u32 layer = 15 - i - 1
		leafInfo.pathDigests[layer][u32_from_2bits([selector[layer * 2], selector[layer * 2 + 1]])] = currentValue
		currentValue = hash(leafInfo.pathDigests[layer])
    endfor
	return currentValue

def getAccountIndex(LeafInfo leafInfo) -> field:
	bool[32] selector = u32_to_bits(leafInfo.index)
	return u32_to_field(u32_from_bits([...[false; 12], ...selector[2..22]]))

def getAssetIndex(LeafInfo leafInfo) -> field:
	bool[32] selector = u32_to_bits(leafInfo.index)
	return u32_to_field(u32_from_bits([...[false; 22], ...selector[22..32]]))

def getValueDefault(LeafInfo leafInfo) -> field:
	bool[32] selector = u32_to_bits(leafInfo.index)
	return lookup2bit(selector[30..32], leafInfo.leafValues)

def getRootHashAfterUpdate(LeafInfo leafInfo, field v) -> field:
	bool[32] selector = u32_to_bits(leafInfo.index)
	leafInfo.leafValues[u32_from_2bits(selector[30..32])] = v
	return getRootHash(leafInfo)
