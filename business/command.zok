from "../utils/markle-tree" import getBalanceAccountIndex, getBalanceAssetIndex, LeafInfo, getValueBySelector, setAmountBySelector, getShareAccountIndex, getSharePoolIndex, getPoolIndex
from "../utils/sign.zok" import checkSign

const u32 COMMAND_ARGS = 8

struct Command {
    field op
    field[8] args
}

const bool[2] AX_SELECTOR = [false, false]
const bool[2] AY_SELECTOR = [false, true]
const bool[2] NONCE_SELECTOR = [true, false]
const field META_ASSET_INDEX = 0

def checkAccount(LeafInfo leafInfo, field account) -> bool:
    return getBalanceAccountIndex(leafInfo) == account

def checkAsset(LeafInfo leafInfo, field asset) -> bool:
    return getBalanceAssetIndex(leafInfo) == asset

def checkPool(LeafInfo leafInfo, field pool) -> bool:
    return getPoolIndex(leafInfo) == pool

def checkShareAccount(LeafInfo leafInfo, field account) -> bool:
    return getShareAccountIndex(leafInfo) == account

def checkSharePool(LeafInfo leafInfo, field account) -> bool:
    return getSharePoolIndex(leafInfo) == account

def checkToken(field token) -> bool:
    return token >= 4 && token < 1024

def checkNonceAndUpdate(LeafInfo leafInfo, field nonce) -> field:
    // check and update nonce
    field old_nonce = getValueBySelector(leafInfo, NONCE_SELECTOR)
    assert(old_nonce + 1 == nonce)
    return setAmountBySelector(leafInfo, nonce, NONCE_SELECTOR)

def checkCommandSign<N>(Command command, LeafInfo leafInfo, field[N][2] msg) -> bool:
    field[2] r = command.args[0..2]
    field s = command.args[2]
    field[2] a = [
        getValueBySelector(leafInfo, AX_SELECTOR),
        getValueBySelector(leafInfo, AY_SELECTOR)
    ]
    assert(checkAsset(leafInfo, META_ASSET_INDEX))
    return checkSign(msg, r, s, a)

def checkedAdd(field x, field y) -> field:
    field z = x + y
    assert(z >= x)
    return z

def checkedSub(field x, field y) -> field:
    field z = x - y
    assert(z <= x)
    return z