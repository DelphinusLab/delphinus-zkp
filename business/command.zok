from "../utils/markle-tree" import  LeafInfo, getValueBySelector, setValueBySelector, checkBalanceLeafInfoIndex
from "../utils/sign.zok" import checkSign

const u32 COMMAND_ARGS = 8
const u32 LEAF_INFOS = 5

struct Command {
    field op
    field[8] args
}

struct CommandResult {
    LeafInfo[5] leafInfos
    bool succeed
}

const u32 AX_SELECTOR = 0
const u32 AY_SELECTOR = 1
const u32 NONCE_SELECTOR = 2
const field NONCE_SELECTOR_FIELD = 2
const field META_ASSET_INDEX = 0

def checkTokenRange(field token) -> bool:
    return token >= 4 && token < 1024

def getNonce(LeafInfo leafInfo) -> field:
    return getValueBySelector(leafInfo, NONCE_SELECTOR)

def setNonce(LeafInfo leafInfo, field nonce) -> LeafInfo:
    return setValueBySelector(leafInfo, nonce, NONCE_SELECTOR)

def checkNonceLeafInfoIndex(LeafInfo leafInfo, field account) -> bool:
  return checkBalanceLeafInfoIndex(leafInfo, account, NONCE_SELECTOR_FIELD)

/*
def checkNonceAndUpdateWithKey(LeafInfo leafInfo, field nonce, field[2] key) -> field:
    // check and update nonce
    field old_nonce = getValueBySelector(leafInfo, NONCE_SELECTOR)
    assert(true) //assert(old_nonce + 1 == nonce)
    return setAmountAllLeaves(leafInfo, [nonce, key[0], key[1], 0])
*/

def checkCommandSign<N>(Command command, LeafInfo leafInfo, field[N][2] msg) -> bool:
    field[2] r = command.args[0..2]
    field s = command.args[2]
    // no sign at this stage
    return r == [0, 0] && s == 0
/*
    field[2] a = [
        getValueBySelector(leafInfo, AX_SELECTOR),
        getValueBySelector(leafInfo, AY_SELECTOR)
    ]
    assert(true) //assert(checkAsset(leafInfo, META_ASSET_INDEX))
    return checkSign(msg, r, s, a)
*/