from "./command" import Command, CommandResult, checkTokenRange, checkCommandSign, COMMAND_ARGS, getNonce, setNonce, checkNonceLeafInfoIndex
from "../utils/markle-tree" import LeafInfo, checkBalanceLeafInfoIndex, getValue, setValue

def main(Command command, LeafInfo[5] leafInfos) -> CommandResult:
    CommandResult cres = CommandResult {
        succeed: true,
        leafInfos: leafInfos
    }
    cres.succeed = true

    field account = command.args[3]
    field token = command.args[4]
    field amount = command.args[5]
    // command.args[6] is for L1 account address
    field nonce = command.args[7]

    cres.succeed = cres.succeed && checkTokenRange(token)

    // nonce
    LeafInfo leafInfo = leafInfos[0]
    cres.succeed = cres.succeed && checkNonceLeafInfoIndex(leafInfo, account)
    cres.succeed = cres.succeed && (checkCommandSign(command, leafInfo, [[command.op, account], [token, amount], [nonce, 0]]))
    cres.succeed = cres.succeed && getNonce(leafInfo) == nonce
    cres.leafInfos[0] = setNonce(leafInfo, nonce + 1)

    // sub amount
    leafInfo = leafInfos[1]
    cres.succeed = cres.succeed && checkBalanceLeafInfoIndex(leafInfo, account, token)
    
    field balance = getValue(leafInfo)
    field balanceNew = balance - amount
    cres.succeed = cres.succeed && (balance >= amount)
    cres.leafInfos[1] = setValue(leafInfo, balanceNew)

    return cres

    