import "utils/pack/u32/pack128" as pack128
import "utils/pack/bool/pack128" as pack128b
import "utils/pack/bool/unpack256" as unpack256b
import "utils/casts/bool_256_to_u32_8" as bool_256_to_u32_8
import "utils/casts/u32_4_to_bool_128" as u32_4_to_bool_128

import "../utils/sha256" as sha256
from "./command" import Command, CommandResult
from "../utils/markle-tree" import LeafInfo, checkLeafInfo, getRootHash

import "./addpool" as addpool
import "./deposit" as deposit
import "./withdraw" as withdraw
import "./swap" as swap
import "./supply" as supply
import "./retrieve" as retrieve
// import "./addtoken" as addtoken

/*
import "./setkey" as setkey
*/

def fieldSplit(field v) -> u32[8]:
    bool[256] d = unpack256b(v)
    return bool_256_to_u32_8(d)

def shaCommands<N>(Command[N] commands) -> field[2]:
    u32[N * 5][2][8] data = [[[0; 8]; 2]; N * 5]

    for u32 i in 0..N do
        Command command = commands[i]
        data[i * 5][0] = fieldSplit(0)
        data[i * 5][1] = fieldSplit(command.op)
        for u32 j in 0..4 do
            data[i * 5 + 1 + j][0] = fieldSplit(command.args[j * 2])
            data[i * 5 + 1 + j][1] = fieldSplit(command.args[j * 2 + 1])
        endfor
    endfor

    u32[8] hash = sha256(data)
    return [
        pack128b(u32_4_to_bool_128(hash[0..4])),
        pack128b(u32_4_to_bool_128(hash[4..8]))
    ]

const field OP_DEPOSIT = 0
const field OP_WITHDRAW = 1
const field OP_SWAP = 2
const field OP_SUPPLY = 3
const field OP_RETRIEVE = 4
const field OP_ADDPOOL = 5
const field OP_SETKEY = 6
const field OP_ADDTOKEN = 7

 def op6(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return CommandResult {
        succeed: false,
        leafInfos: leafInfos
    }

def op5(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return if command.op == OP_ADDPOOL then addpool(command, leafInfos) else op6(command, leafInfos) fi

def op4(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return if command.op == OP_RETRIEVE then retrieve(command, leafInfos) else op5(command, leafInfos) fi

def op3(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return if command.op == OP_SUPPLY then supply(command, leafInfos) else op4(command, leafInfos) fi

def op2(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return if command.op == OP_SWAP then swap(command, leafInfos) else op3(command, leafInfos) fi

def op1(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return if command.op == OP_WITHDRAW then withdraw(command, leafInfos) else op2(command, leafInfos) fi

def op0(Command command, private LeafInfo[5] leafInfos) -> CommandResult:
    return if command.op == OP_DEPOSIT then deposit(command, leafInfos) else op1(command, leafInfos) fi

def main(field[2] hash, field startRoot, private Command command, private LeafInfo[5] leafInfos, field endRoot):
    assert(hash == shaCommands([command]))

    assert(startRoot == leafInfos[0].root)

    for u32 i in 0..5 do
        assert(checkLeafInfo(leafInfos[i]))
    endfor

    field[5] nextRoot = [endRoot; 5]
    for u32 i in 0..4 do
        nextRoot[i] = leafInfos[i + 1].root
    endfor

    CommandResult cres = op0(command, leafInfos)

    for u32 i in 0..5 do
        assert(getRootHash(cres.leafInfos[i]) == nextRoot[i])
    endfor

    assert(cres.succeed)

    return
