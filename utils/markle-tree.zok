import "hashes/poseidon/poseidon" as hash
import "ecc/edwardsCompress" as edwardsCompress
import "ecc/babyjubjubParams" as context
from "ecc/babyjubjubParams" import BabyJubJubParams
import "utils/casts/u32_from_bits" as u32_from_bits
import "utils/casts/u32_to_bits" as u32_to_bits
import "utils/casts/u32_to_field" as u32_to_field
import "utils/multiplexer/lookup2bit" as lookup2bit

const u32 TOTAL_BITS = 32
const u32 CLASS_BITS = 2
const u32 LEAF_BITS = 2

const u32 CLASS_START_BIT = 0
const u32 CLASS_END_BIT = CLASS_START_BIT + CLASS_BITS
const u32 LEAF_STATR_BIT = TOTAL_BITS - LEAF_BITS
const u32 LEAF_END_BIT = TOTAL_BITS

const bool[2] BALANCE_SELECTOR = [false, false]
const bool[2] POOL_SELECTOR = [false, true]
const bool[2] SHARE_SELECTOR = [true, false]

struct LeafInfo {
  field root
  bool[32] index
  field[15][4] pathDigests
  field[4] leafValues
}

def bits_to_field<N>(bool[N] bits) -> field:
  return u32_to_field(u32_from_bits([...[false; 32 - N], ...bits]))

def u32_from_2bits(bool[2] selector) -> u32:
  return u32_from_bits([...[false; 30], ...selector])

def getRootHash(LeafInfo leafInfo) -> field:
  bool[32] selector = leafInfo.index
  bool ret = true
  field currentValue = hash(leafInfo.leafValues)
  for u32 i in 1..16 do
    u32 layer = 15 - i
    leafInfo.pathDigests[layer][u32_from_2bits(selector[layer * 2..layer * 2 + 2])] = currentValue
    currentValue = hash(leafInfo.pathDigests[layer])
  endfor
  return currentValue

def checkLeafInfo(LeafInfo leafInfo) -> bool:
  bool[32] selector = leafInfo.index
  bool ret = true
  field currentValue = hash(leafInfo.leafValues)
  for u32 i in 1..16 do
    u32 layer = 15 - i
    ret = ret && (leafInfo.pathDigests[layer][u32_from_2bits(selector[layer * 2..layer * 2 + 2])] == currentValue)
    currentValue = hash(leafInfo.pathDigests[layer])
  endfor
  return ret && (leafInfo.root == currentValue)

/* getter */

def getValueBySelector(LeafInfo leafInfo, u32 idx) -> field:
  return leafInfo.leafValues[idx]

def getValue(LeafInfo leafInfo) -> field:
  return getValueBySelector(leafInfo, u32_from_2bits(leafInfo.index[30..TOTAL_BITS]))

/* setter */

def setValue(LeafInfo leafInfo, field v) -> LeafInfo:
  leafInfo.leafValues[u32_from_2bits(leafInfo.index[LEAF_STATR_BIT..LEAF_END_BIT])] = v
  return leafInfo

def setValueBySelector(LeafInfo leafInfo, field v, u32 idx) -> LeafInfo:
  leafInfo.leafValues[idx] = v
  return leafInfo

def setValues(LeafInfo leafInfo, field[4] v) -> LeafInfo:
  leafInfo.leafValues = v
  return leafInfo

/* balance index */

def checkBalanceLeafInfoIndex(LeafInfo leafInfo, field account, field asset) -> bool:
  bool[32] selector = leafInfo.index
  bool cond0 = selector[0..2] == BALANCE_SELECTOR
  bool cond1 = bits_to_field(selector[2..22]) == account
  bool cond2 = bits_to_field(selector[22..32]) == asset
  return cond0 && cond1 && cond2

/* pool index */

def checkPoolLeafInfoIndex(LeafInfo leafInfo, field pool) -> bool:
  bool[32] selector = leafInfo.index
  bool cond0 = selector[0..2] == POOL_SELECTOR
  bool cond1 = bits_to_field(selector[2..12]) == pool
  bool cond2 = selector[12..30] == [false; 18]
  return cond0 && cond1 && cond2

const u32 TOKEN0_INFO_SELECTOR = 0
const u32 TOKEN1_INFO_SELECTOR = 1
const u32 TOKEN0_AMOUNT_SELECTOR = 2
const u32 TOKEN1_AMOUNT_SELECTOR = 3

def getPoolToken0Info(LeafInfo leafInfo) -> field:
  return getValueBySelector(leafInfo, TOKEN0_INFO_SELECTOR)

def getPoolToken1Info(LeafInfo leafInfo) -> field:
  return getValueBySelector(leafInfo, TOKEN1_INFO_SELECTOR)

def getPoolToken0Amount(LeafInfo leafInfo) -> field:
  return getValueBySelector(leafInfo, TOKEN0_AMOUNT_SELECTOR)

def getPoolToken1Amount(LeafInfo leafInfo) -> field:
  return getValueBySelector(leafInfo, TOKEN1_AMOUNT_SELECTOR)


/* share index */

def checkShareLeafInfoIndex(LeafInfo leafInfo, field account, field pool) -> bool:
  bool[32] selector = leafInfo.index
  bool cond0 = selector[0..2] == SHARE_SELECTOR
  bool cond1 = bits_to_field(selector[2..22]) == account
  bool cond2 = bits_to_field(selector[22..32]) == pool
  return cond0 && cond1 && cond2
